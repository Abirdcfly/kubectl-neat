#! /bin/bash
set -e -o pipefail

# gets a file path ($0) and finds the directory where the file is located or the original file if symlinked (krew)
# doesn't do recursive link traversal but that's not fine for current krew architecture
function detectDir() {
    local file="$1"
    if [ -z "$file" ]; then
        pwd
        return
    fi
    if [ -L "$file" ]; then
        file=$(readlink "$file")
    fi
    dirname "$file"
}
# detect bats and exit. this is to allow bats to source this file in order to unit test detectDir
# detectDir can't move to common.sh because it's needed in order to source common.sh
if [ -n "$BATS_TEST_FILENAME" ]; then
    return 0
fi

dir=$(detectDir "$0")

. "$dir"/common.sh
resource_construct_file="$dir"/construct.resource
resource_delete_file="$dir"/delete.resource
jq="$dir"/jq
yq="$dir"/yq
sponge="$dir"/sponge

o=$(detectOutput "$@")
tmp=$(mktemp)
getInput "$@">"$tmp"

if [ "$o" == "yaml" ]; then
    "$yq" r --tojson "$tmp" | "$sponge" "$tmp"
fi

# step 1 - keep only wanted paths (whitelist)
"$jq" --from-file "$resource_construct_file" "$tmp" | "$sponge" "$tmp"

# step 2 - delete unwanted paths (blacklist)
while read -r line; do
    "$jq" ". as \$in | try del($line) catch \$in" "$tmp" | "$sponge" "$tmp"
done <"$resource_delete_file"

# step 3 - delete empty
"$jq" 'delpaths([ paths((type == "object" or type == "array") and length==0) ])' "$tmp" | "$sponge" "$tmp"

# step 4 - delete defaults
while read -r line; do
    json_path=$("$jq" --raw-output 'join(".")'<<<"$line")
    isDefault=$("$dir"/kube-defaulter --path "$json_path" --command "is-default" <"$tmp"  || echo "false")
    if [ "$isDefault" == 'true' ]; then
        "$jq" --argjson path "$line" 'delpaths([$path])' "$tmp" | "$sponge" "$tmp"
    fi
done <<<"$("$jq" --compact-output '.spec | paths(scalars) | ["spec", .[]]' "$tmp")"

if [ "$o" == "yaml" ]; then
    "$yq" r "$tmp" | "$sponge" "$tmp"
fi

cat "$tmp"
rm "$tmp"


